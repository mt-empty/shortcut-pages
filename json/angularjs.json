{
    "id": "angularjs_cheat_sheet",
    "name": "AngularJS",
    "description": "A quick reference of AngularJS services and directives",
    "metadata": {
        "sourceName": "AngularJS",
        "sourceUrl": "https://docs.angularjs.org/api/"
    },
    "aliases": ["angular", "angular js"],
    "template_type": "reference",
    "section_order": [
        "Services",
        "Directives",
        "Directives (continued)",
        "Filters",
        "angular.module"
    ],
    "sections": {
        "Directives": [{
            "key": "The ng-app directive initializes an AngularJS application",
            "value": "ng-app"
        }, {
            "key": "The ng-init directive initializes application data",
            "value": "ng-init"
        }, {
            "key": "The ng-model directive binds the value of HTML controls (input, select, textarea) to application data",
            "value": "ng-model"
        }, {
            "key": "The ng-repeat directive repeats an HTML element",
            "value": "ng-repeat"
        }, {
            "key": "ngJq",
            "val": "Use this directive to force the angular.element library"
        }, {
            "key": "ngCsp",
            "val": "Angular has some feature that can break CSP(Content Security Policy)rules"
        }, {
            "key": "ngClick",
            "val": "This directive allows you to specify custom behavior when an element is clicked"
        }, {
            "key": "ngDisabled",
            "val": "This directive sets the disabled attribute on the element if the expression inside ngDisabled evaluates to truthy"
        }, {
            "key": "ngChecked",
            "val": "Sets the 'checked' attribute on the element, if the expression inside 'ngChecked' is truthy"
        }, {
            "key": "ngChange",
            "val": "Evaluate the given expression when the user changes the input"
        }, {
            "key": "ngClass",
            "val": "Allows to dynamically set CSS classes on an HTML element by databinding an expression that represents all classes to be added"
        }, {
            "key": "ngHide",
            "val": "Show or hide the given HTML element based on the expression provided to the 'ngHide' attribute"
        }, {
            "key": "ngShow",
            "val": "Show or hide the given HTML element based on the expression provided to the 'ngShow' attribute"
        }, {
            "key": "ngRequired",
            "val": "Add the required 'validator' to 'ngModel'"
        }, {
            "key": "ngMousedown",
            "val": "Allow you to specify custom behavior on mousedown event"
        }, {
            "key": "ngMouseup",
            "val": "Specify custom behavior on mouseup event"
        }, {
            "key": "ngMouseover",
            "val": "Specify custom behavior on mouseover event"
        }, {
            "key": "ngMouseenter",
            "val": "Specify custom behavior on mouseover event"
        }, {
            "key": "ngMouseleave",
            "val": "Specify custom behavior on mouseleave event"
        }],
        "Directives (continued)": [{
            "key": "ngApp",
            "val": "Use this directive to auto-bootstrap an AngularJS application."
        },{
            "key": "ngRepeat",
            "val": "The ngRepeat directive instantiates a template once per item from a collection."
        },{
            "key": "ngController",
            "val": "The ngController directive attaches a controller class to the view."
        },{
            "key": "ngShow",
            "val": "The ngShow directive shows or hides the given HTML element based on the expression provided to the ngShow attribute."
        },{
            "key": "ngHide",
            "val": "The ngHide directive shows or hides the given HTML element based on the expression provided to the ngHide attribute."
        },{
            "key": "ngIf",
            "val": "The ngIf directive removes or recreates a portion of the DOM tree based on an {expression}."
        },{
            "key": "ngTransclude",
            "val": "Directive that marks the insertion point for the transcluded DOM of the nearest parent directive that uses transclusion."
        },{
            "key": "ngMousemove",
            "val": "Specify custom behavior on mousemove event"
        }, {
            "key": "ngKeydown",
            "val": "Specify custom behavior on keydown event"
        }, {
            "key": "ngKeyup",
            "val": "Specify custom behavior on keyup event"
        }, {
            "key": "ngKeypress",
            "val": "Specify custom behavior on keypress event"
        }, {
            "key": "ngReadonly",
            "val": "Sets the 'readOnly' attribute on the element, if the expression inside 'ngReadonly' is truthy."
        }, {
            "key": "ngSelected",
            "val": "Sets the 'selected' attribute on the element, if the expression inside 'ngSelected' is truthy"
        }, {
            "key": "ngBind",
            "val": "Replaces the text content of the specified HTML element with the value of a given expression, and to update the text content when the value of that expression changes"
        }, {
            "key": "ngSubmit",
            "val": "Enables binding angular expressions to onsubmit events"
        }, {
            "key": "ngFocus",
            "val": "Specify custom behavior on focus event"
        }, {
            "key": "ngBlur",
            "val": "Specify custom behavior on blur event"
        }, {
            "key": "ngCopy",
            "val": "Specify custom behavior on copy event"
        }, {
            "key": "ngCut",
            "val": "Specify custom behavior on cut event"
        }, {
            "key": "ngPaste",
            "val": "Specify custom behavior on paste event"
        }],
        "Services": [{
            "key": "$http",
            "val": "The $http service is a core Angular service that facilitates communication with the remote HTTP servers via the browser's XMLHttpRequest object or via JSONP."
        }, {
            "key": "$interval",
            "val": "Angular's wrapper for window.setInterval."
        }, {
            "key": "$location",
            "val": "Parses the URL in the browser address bar (based on the window.location) and makes the URL available to your application."
        }, {
            "key": "$log",
            "val": "Simple service for logging. Default implementation safely writes the message into the browser's console (if present)."
        }, {
            "key": "$controller",
            "val": "Responsible for instantiating controllers."
        }, {
            "key": "$document",
            "val": "A jQuery or jqLite wrapper for the browser's window.document object."
        }, {
            "key": "$filter",
            "val": "Specify custom behavior on blur event"
        }, {
            "key": "$timeout",
            "val": "Angular's wrapper for window.setTimeout. The fn function is wrapped into a try/catch block and delegates any exceptions to $exceptionHandler service."
        }, {
            "key": "$window",
            "val": "A reference to the browser's window object."
        },{
            "key": "$compile",
            "val": "Compiles an HTML string or DOM into a template and produces a template function"
        },{
            "key": "$q",
            "value": "A service that helps you run functions asynchronously, and use their return values (or exceptions) when they are done processing."
        },{
            "key": "$injector",
            "value": "A service which is used to retrieve object instances as defined by provider, instantiate types, invoke methods, and load modules."
        },{
            "key": "$parse",
            "value": "Converts Angular expression into a function."
        },{
            "key": "$interpolate",
            "value": "Compiles a string with markup into an interpolation function."
        },{
            "key": "$templateCache",
            "value": "The first time a template is used, it is loaded in the template cache for quick retrieval."
        }],
        "Filters": [{
            "value": "Format a number to a currency format",
            "key": "currency"
        }, {
            "value": "Format a date to a specified format",
            "key": "date"
        }, {
            "value": "Select a subset of items from an array",
            "key": "filter"
        }, {
            "value": "Format an object to a JSON string",
            "key": "json"
        }, {
            "value": "Limits an array/string, into a specified number of elements/characters",
            "key": "limitTo"
        }, {
            "value": "Format a string to lower case",
            "key": "lowercase"
        }, {
            "value": "Format a number to a string",
            "key": "number"
        }, {
            "value": "Orders an array by an expression",
            "key": "orderBy"
        }, {
            "value": "Format a string to upper case",
            "key": "uppercase"
        }],
        "angular.module": [{
            "value": "Use this method to register work which should be performed when the injector is done loading all modules.",
            "key": "run(initializationFn)"
        }, {
            "value": "Use this method to register work which needs to be performed on module loading.",
            "key": "config(configFn)"
        }, {
            "value": "Register a new directive with the compiler.",
            "key": "directive(name, directiveFactory)"
        }, {
            "value": "Register a new component with the compiler.",
            "key": "component(name, componentFactory)"            
        }, {
            "value": "The $controller service is used by Angular to create new controllers.",
            "key": "controller(name, constructor)"
        }, {
            "value": "Register a constant service with the $injector, such as a string, a number, an array, an object or a function.",
            "key": "constant(name, value)"
        }, {
            "value": "Register a value service with the $injector, such as a string, a number, an array, an object or a function",
            "key": "value(name, value)"
        }, {
            "value": "Register a service constructor, which will be invoked with new to create the service instance",
            "key": "service(name, constructor)"
        }, {
            "value": "Register a service factory, which will be called to return the service instance.",
            "key": "factory(name, $getFn)"
        }, {
            "value": "Register a provider function with the $injector.",
            "key": "provider(name, provider)"
        }, {
            "value": "Register a decorator function with the $injector.",
            "key": "decorator(name, decorFn)"
        }]
    }
}
